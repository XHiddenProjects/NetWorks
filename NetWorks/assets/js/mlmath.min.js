var MLMath={...Math,stats:{mean:(...t)=>t.reduce(((t,e)=>t+e))/t.length,mode:(...t)=>{let e=0,a=0;for(let r=0;r<t.length;r++){let s=0;for(let e=0;e<t.length;e++)t[e]===t[r]&&s++;s>a&&(a=s,e=t[r])}return e},median:(...t)=>{t.sort(((t,e)=>t-e));let e=Math.floor(t.length/2);return t.length%2!=0?t[e]:(t[e-1]+t[e])/2},range:(...t)=>Math.max(...t)-Math.min(...t),stdDev:(...t)=>{const e=MLMath.stats.mean(...t),a=MLMath.stats.mean(...t.map((t=>Math.pow(t-e,2))));return Math.sqrt(a)},var:(...t)=>{const e=MLMath.stats.mean(...t);return MLMath.stats.mean(...t.map((t=>Math.pow(t-e,2))))},correl:(t,e)=>{const a=MLMath.stats.mean(...t),r=MLMath.stats.mean(...e);return t.reduce(((t,s,n)=>t+(s-a)*(e[n]-r)),0)/Math.sqrt(t.reduce(((t,e)=>t+(e-a)**2),0)*e.reduce(((t,e)=>t+(e-r)**2),0))},COVARIANCE_P:(t,e)=>{const a=MLMath.stats.mean(...t),r=MLMath.stats.mean(...e),s=t.map(((t,s)=>(t-a)*(e[s]-r)));return MLMath.stats.mean(...s)},COVARIANCE_S:(t,e)=>{if(t.length!==e.length)throw new Error("Datasets must have the same length");const a=MLMath.stats.mean(...t),r=MLMath.stats.mean(...e),s=t.length;let n=0;for(let o=0;o<s;o++)n+=(t[o]-a)*(e[o]-r);return n/(s-1)},CHISQ_TEST:(t,e)=>{if(t.length!==e.length)throw new Error("Observed and expected arrays must have the same length");let a=0;for(let r=0;r<t.length;r++)a+=Math.pow(t[r]-e[r],2)/e[r];return a},CONFIDENCE_NORM:(t,e,a)=>{const r=MLMath.stats.Z_SCORE(t/2);return parseFloat((r*(e/Math.sqrt(a))).toFixed(3))},CONFIDENCE_T(t,e,a){const r=a-1,s=t/2,n=e/Math.sqrt(a);return MLMath.stats.T_SCORE(1-s,r)*n},Z_SCORE:t=>-1*MLMath.stats.invCumDist(t),invCumDist:t=>{const e=[2.50662823884,-18.61500062529,41.39119773534,-25.44106049637],a=[-8.4735109309,23.08336743743,-21.06224101826,3.13082909833],r=[.3374754822726147,.9761690190917186,.1607979714918209,.0276438810333863,.0038405729373609,.0003951896511919,321767881768e-16,2.888167364e-7,3.960315187e-7],s=t-.5;let n;if(Math.abs(s)<.42)return n=s*s,s*(((e[3]*n+e[2])*n+e[1])*n+e[0])/((((a[3]*n+a[2])*n+a[1])*n+a[0])*n+1);{n=t,s>0&&(n=1-t),n=Math.log(-Math.log(n));let e=r[0];for(let t=1;t<r.length;t++)e+=r[t]*Math.pow(n,t);return s<0&&(e=-e),e}},percentile:(t,e)=>{t.sort(((t,e)=>t-e));const a=e/100*(t.length-1);if(Math.floor(a)===a)return t[a];{const e=t[Math.floor(a)];return e+(t[Math.ceil(a)]-e)*(a-Math.floor(a))}}},random:{uniform:(t,e,a)=>{let r=0,s=0,n=0;const o=[];if(Array.isArray(a))do{n=0,o.push([]);do{o[s][n]=Math.random()*(e-t)+t,n++}while(n<a[1]);s++}while(s<a[0]);else do{o.push(Math.random()*(e-t)+t),r++}while(r<a);return o},normal:(t=0,e=1,a=1)=>{const r=()=>{let t=0,e=0;for(;0===t;)t=Math.random();for(;0===e;)e=Math.random();return Math.sqrt(-2*Math.log(t))*Math.cos(2*Math.PI*e)};if(Array.isArray(a)){const s=[];for(let n=0;n<a[0];n++){const n=[];for(let s=0;s<a[1];s++)n.push(t+e*r());s.push(n)}return s}{const s=[];for(let n=0;n<a;n++)s.push(t+e*r());return s}}},regressions:{linear:(t,e)=>{const a=t.length;if(a!==e.length)throw new Error("Datasets must have the same length");const r=MLMath.stats.mean(...t),s=MLMath.stats.mean(...e);let n=0,o=0;for(let h=0;h<a;h++)n+=(t[h]-r)*(e[h]-s),o+=Math.pow(t[h]-r,2);const h=n/o;return{slope:h,intercept:s-h*r}},polynomial:(t,e,a=2)=>{const r=t.length;if(r!==e.length)throw new Error("Datasets must have the same length");const s=[];for(let e=0;e<r;e++){const r=[];for(let s=0;s<=a;s++)r.push(Math.pow(t[e],s));s.push(r)}const n=s[0].map(((t,e)=>s.map((t=>t[e])))),o=n.map((t=>t.map(((e,a)=>t.reduce(((t,e,r)=>t+e*s[r][a]),0))))),h=n.map((t=>t.reduce(((t,a,r)=>t+a*e[r]),0)));return MLMath.regressions.solve(o,h)},solve:(t,e)=>{const a=t.length;for(let r=0;r<a;r++){let s=r;for(let e=r+1;e<a;e++)Math.abs(t[e][r])>Math.abs(t[s][r])&&(s=e);[t[r],t[s]]=[t[s],t[r]],[e[r],e[s]]=[e[s],e[r]];for(let s=r+1;s<a;s++){const n=t[s][r]/t[r][r];for(let e=r;e<a;e++)t[s][e]-=n*t[r][e];e[s]-=n*e[r]}}const r=Array(a).fill(0);for(let s=a-1;s>=0;s--){let n=0;for(let e=s+1;e<a;e++)n+=t[s][e]*r[e];r[s]=(e[s]-n)/t[s][s]}return r},measure:(t,e,a)=>{const r=Math.min(...t),s=Math.max(...t),n=[];for(i=r;i<=s;i++)n.push(e*i+a);return n}},format:{fixed:(t,e)=>t>Math.floor(t)&&t<Math.ceil(t)?parseFloat(t.toFixed(e)):t}};